---
layout: post
title: Каррирование в Python
date: '2019-07-27 11:10:15'
place: Лондон, Великобритания
location:
  latitude: 51.507351
  longitude: -0.127758
tags:
- python
- funcy
- glom
---

С помощью простого примера хочу показать что такое каррирования и места где это можно использовать. Все-таки функциональное программирование это новый (старый) тренд и вообще становится стандартом.

<!--more-->

> Каррирование (от англ. currying, иногда — карринг) — преобразование функции от многих аргументов в набор функций, каждая из которых является функцией от одного аргумента. Возможность такого преобразования впервые отмечена в трудах Готтлоба Фреге, систематически изучена Моисеем Шейнфинкелем в 1920-е годы, а наименование получило по имени Хаскелла Карри — разработчика комбинаторной логики, в которой сведение к функциям одного аргумента носит основополагающий характер.
> - Wikipedia

Для магии я буду использовать пакет [funcy](https://github.com/Suor/funcy) и функцию [curry](https://funcy.readthedocs.io/en/stable/funcs.html#curry).

#### Синопсис:

Когда мы работаем с [glom](https://github.com/mahmoud/glom/) хочется упростить вызов, чтобы получать доступ к объекту не используя первый аргумент (`target_object`) при каждом вызове.
В идеале хотелось бы заменить вызов `glom(target_object, path)` на `glom(path)` и в этом нам поможет каррирование.

{% highlight python %}
from funcy import curry
from glom import glom


# наши данные
data = {"a": "a", "b": {"c": "c"}
# создаем каррирование
curry_glom = curry(glom)
# задаем первый аргумент
data_glom = make_getter(data)
# и теперь мы можем использовать простой вызова функции
data_glom("a.b")
{% endhighlight %}


